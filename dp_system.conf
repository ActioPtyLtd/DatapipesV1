
// Mediasite Data Source mapping
system_ds {
  type = "rest"
  behavior = "simple"
  path = "-"
  onError = ""
  query {
    onError = "exception"
  }
  uri = "http://54.206.113.136:7653"
  luri = "http://localhost:7653"
}

system_ds_hdr_api
  {
    headers {
      Accept = "application/vnd.api+json"
      Content-Type = "application/vnd.api+json"
    }
  }
system_ds_hdr
  {
    headers {
      Accept = "application/json"
      Content-Type = "application/json"
    }
  }

script {
  tasks {
    log_data {
      type = "dump"
    }
    to_value {
      type = "transformTerm"
      term = "ds => batch( ds.value )"
    }
  }
}

script {
  schema {}
  schedule {}
  system {}
  services {}
  startup {}
  tasks {
    t_sys_load_events {
      type = "mergeTemplate"
      templates {
        eventsbody = """{ "namespace":""""${namespace}"""", "event_id" : "${event_id}","config_name" : "${configName}","run_id": "${runId}","pipeline_run_id": "${pipeline_run_id}","task_run_id": "${task_run_id}","event_time" : "${event_time}","event_type" : "${event_type}","action_type" : "${action_type}","message" : "${message}","detail" : "${keyName}", "counterValue" : "${counter_value}", "counterLabel" : "${counter_label}", "counterTotal":"${counter_total}"}"""
      }
    }
    sys_load_events {
      type = "load"
      behavior = "simple"
      dataSource = ${system_ds}
      dataSource = ${system_ds_hdr}
      dataSource {
        query {
          create {
            uri = ${system_ds.uri}"/iiiearth/event",
            body = "eventsbody"
          }
        }
      }
    }

  }
  pipelines {
    sys_p_rename_config {
      pipe =  "log_data",
      onEmpty = "exit"
    }
    sys_p_create_config {
      pipe = "log_data"
      onError = "exit"
    }
    sys_p_create_pipe {
      pipe = "log_data"
    }
    sys_p_create_task {
      pipe = "log_data"
    }
    sys_p_create_stages {
      pipe = "log_data"
    }
    sys_p_create_run {
      pipe = "log_data"
    }
    sys_p_create_run_pipelines {
      pipe = "log_data"
    }
    sys_p_create_run_tasks {
      pipe = "log_data"
    }
    sys_p_load_events {
      pipe = "t_sys_load_events | sys_load_events"
    }
  },
  startup{
    exec = "sys_p_load_events"
  }
}

