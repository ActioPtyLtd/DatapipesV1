include "jcu_localenv.conf"

script {
  schema {},
  tasks {
    read-schedules {
      type = "extract",
      behavior = "",
      dataSource = ${jcu_ds},
      dataSource {
        query {
          queryTemplate = "",
          read = "SELECT "${jcu_ds.sql_limit_return_result}" courseid+'_'+room+'_'+presenterfullname courseid,moduleid,room,"${jcu_ds.sql_room_recorder_map}" recorderid,year, CONVERT(varchar, SWITCHOFFSET(CONVERT(datetimeoffset, startdatetime), DATENAME(TzOffset, SYSDATETIMEOFFSET())),127) startdatetime,CONVERT(varchar, SWITCHOFFSET(CONVERT(datetimeoffset, enddatetime), DATENAME(TzOffset, SYSDATETIMEOFFSET())),127) enddatetime,duration*60*1000 duration,presenterusername,REPLACE(REPLACE(presenterfullname, CHAR(10), ''), CHAR(13), '') presenterfullname FROM "${jcu_ds.sql_default_jcu_table}" where presenterUsername is not null "${jcu_ds.sql_extra_where_clause}" order by moduleid"
        }
      }
    },
    read_modules {
      type = "extract",
      behavior = "",
      dataSource = ${jcu_ds},
      dataSource {
        query {
          queryTemplate = "",
          read = "select distinct "${jcu_ds.sql_limit_return_result}" moduleid from "${jcu_ds.sql_default_jcu_table}" where PresenterUsername is not null "${jcu_ds.sql_extra_where_clause}" order by moduleid"
        }
      }
    },
    load_folder_uuid {
      type = "join",
      behavior = "",
      iterateR = "ds => ds.value",
      keyL = ${parent_dir_uuid}1"$moduleid",
      keyR = "$ParentFolderId$Name",
      changeL = "$moduleid",
      changeR = "$Id",
      dataSource =  ${mediasite_ds},
      dataSource{
        query{
          read {
            uri =  ${mediasite_ds.url}"/Folders?$skip=0&$top="${limit_folders_read}
          }
        }
      }
    },
    load_module_uuid {
      type = "join",
      behavior = "",
      iterateR = "ds => ds.value",
      keyL = "$moduleid",
      keyR = "$ModuleId",
      changeL = "$moduleid",
      changeR = "$Id",
      dataSource =  ${mediasite_ds},
      dataSource {
        query {
          read {
            uri = ${mediasite_ds.url}"/Modules"
          }
        }
      }
    },
    module_uuid {
      type = "join",
      behavior = "",
      iterateR = "ds => ds.value",
      keyL = "${record.row.moduleid}",
      keyR = "$ModuleId",
      changeL = "${record.row.moduleid}",
      changeR = "$Id",
      dataSource =  ${mediasite_ds},
      dataSource {
        query {
          read {
            uri = ${mediasite_ds.url}"/Modules",
          }
        }
      }
    },
    t_owner_schedule {
      type = "mergeTemplate",
      templates {
        assignownerhdr = ${mediasite_ds.url}"/ResourcePermissions('${create_schedule(0).Id}')",
        assignownerbody = "{\"Owner\" : ${row.presenterusername}, \"InheritPermissions\" : true}"
      }
    },
    assign_owner_schedule {
      type = "lookup",
      behavior = "simple",
      dataSource =  ${mediasite_ds},
      dataSource {
        query {
          read {
            verb = "put",
            uri = "assignownerhdr",
            body = "assignownerbody"
          }
        }
      }
    },
    t_owner_catalog {
      type = "mergeTemplate",
      templates {
        assignownerhdr = ${mediasite_ds.url}"/ResourcePermissions('${create_schedule(0).Id}')",
        assignownerbody = "{\"Owner\" : ${row.presenterusername}, \"InheritPermissions\" : true}"
      }
    },
    assign_owner_catalog {
      type = "lookup",
      behavior = "simple",
      dataSource =  ${mediasite_ds},
      dataSource {
        query {
          read {
            verb = "put",
            uri = "assignownerhdr",
            body = "assignownerbody"
          }
        }
      }
    },
    t_assign_schedule {
      type = "mergeTemplate",
      templates {
        assignschedulebody = "{\"RecorderId\":\"${recorderid}\",\"Name\": \"${courseid}\",\"FolderId\": \"${load_folder_uuid.item.Id}\",\"DeleteInactive\":true,\"LoadPresentation\":true,\"AutoStart\":true,\"AutoStop\":true,\"TitleType\":\"ScheduleNameAndAirDateTime\",\"ScheduleTemplateId\" : \""${schedule_template_uuid}"\"}"
      }
    },
    create_schedule {
      type = "lookup",
      behavior = "simple",
      dataSource =  ${mediasite_ds},
      dataSource {
        read {
          verb = "post",
          uri = ${mediasite_ds.url}"/Schedules",
          body = "assignschedulebody"
        }
      }
    },
    t_assign_recurrence {
      type = "mergeTemplate",
      templates {
        schedulehdr = ${mediasite_ds.url}"/Schedules('${create_schedule(0).Id}')/Recurrences",
        assignschedulebody = "{\"RecordDuration\" : ${row.duration},\"StartRecordDateTime\" : \"${row.startdatetime}\",\"EndRecordDateTime\" : \"${row.enddatetime}\"}"
      }
    },
    create_recurrence {
      type = "lookup",
      behavior = "simple",
      dataSource =  ${mediasite_ds},
      dataSource {
        query {
          read {
            verb = "post",
            uri = "schedulehdr",
            body = "assignschedulebody"
          }
        }
      }
    },
    t_module_association {
      type = "mergeTemplate",
      templates {
        association_template_hdr = ${mediasite_ds.url}"/Modules('${record.row.load_module_uuid.item.Id}')/AddAssociation",
        association_body = "{\"MediasiteId\":\"${record.create_schedule(0).Id}\"}"
      }
    },
    create_module_association {
      type = "lookup",
      behavior = "simple",
      dataSource =  ${mediasite_ds},
      dataSource {
        query {
          read {
            verb = "post",
            uri = "association_template_hdr",
            body = "association_body"
          }
        }
      }
    },
    get_schedules {
      type = "extract",
      behavior = "",
      dataSource =  ${mediasite_ds},
      dataSource {
        query {
          read {
            verb = "get",
            uri = ${mediasite_ds.url}"/Schedules?$skip=0&$top="${limit_schedules_read}
          }
        }
      }
    },
    get_catalogs {
      type = "extract",
      behavior = "",
      dataSource =  ${mediasite_ds},
      dataSource {
        query {
          read {
            verb = "get",
            uri = ${mediasite_ds.url}"/Catalogs?$skip=0&$top="${limit_catalogs_read}
          }
        }
      }
    },
    t_del_catalog {
      type = "mergeTemplate",
      templates {
        merge_del_hdr = ${mediasite_ds.url}"/Catalogs('${Id}')"
      }
    },
    process_delete_catalogs {
      type = "lookup",
      behavior = "simple",
      dataSource =  ${mediasite_ds},
      dataSource {
        query {
          read {
            verb = "delete",
            uri = "merge_del_hdr",
            body = ""
          }
        }
      }
    },
    merge_del_schedule {
      type = "mergeTemplate",
      templates {
        merge_del_hdr = ${mediasite_ds.url}"/Schedules('${Id}')"
      }
    },
    delete_schedules {
      type = "lookup",
      behavior = "simple",
      dataSource =  ${mediasite_ds},
      dataSource {
        query {
          read {
            verb = "delete",
            uri = "merge_del_hdr",
            body = ""
          }
        }
      }
    },
    t_catalog {
      type = "mergeTemplate",
      templates {
        catabody = "{\"Name\" : \"$moduleid\",\"SearchTerm\":\"ModuleAssociations:$moduleid\",\"IsSearchBased\":true,\"LimitSearchToCatalog\":false}"
      }
    },
    setup_catalog {
      type = "lookup",
      behavior = "simple",
      dataSource =  ${mediasite_ds},
      dataSource {
        query {
          read {
            verb = "post",
            uri = ${mediasite_ds.url}"/Catalogs",
            body = "catabody"
          }
        }
      }
    },
    t_catalog_put {
      type = "mergeTemplate",
      templates {
        catahdr_put = ${mediasite_ds.url}"/Catalogs/('${setup_catalog(0).Id}')/Settings",
        catabody_put = "{\"SearchFields\":\"All\",\"SearchTerm\":\"ModuleAssociations:${row.moduleid}\",\"DefaultSortBy\": 1,\"DefaultSortDirection\": 1}"
      }
    },
    set_catalog_search {
      type = "lookup",
      behavior = "simple",
      dataSource =  ${mediasite_ds},
      dataSource {
        query {
          read {
            verb = "put",
            uri = "catahdr_put",
            body = "catabody_put"
          }
        }
      }
    },
    t_catalog_module {
      type = "mergeTemplate",
      templates {
        catamodhdr = ${mediasite_ds.url}"/Modules('${module_uuid.item.Id}')/AddAssociation",
        catamodbody = "{\"MediasiteId\" : \"${record.setup_catalog(0).Id}\" }"
      }
    },
    assign_catalog_module {
      type = "lookup",
      behavior = "simple",
      dataSource =  ${mediasite_ds},
      dataSource {
        query {
          read {
            verb = "post",
            uri = "catamodhdr",
            body = "catamodbody"
          }
        }
      }
    }
    t_folder_security {
      type = "mergeTemplate",
      templates {
        assignownerhdr="https://mediasiteDEV.jcu.edu.au/mediasite/api/v1/Folders('${Id}')/UpdatePermissions",
        assignpermissions="{\"Owner\": \"${Owner}\",\"InheritFromParent\": false,\"MergePermissions\": true,\"PropagatePermissions\": true,\"PropagateOwner\": true,\"Permissions\": [{\"RoleId\": \""${permissions_role_uuid}"\",\"Read\": true,\"Write\": true,\"Execute\": true,\"Moderate\": true,\"Approve\": true,\"DenyRead\": false,\"DenyWrite\": false,\"DenyExecute\": false,\"DenyModerate\": false,\"DenyApprove\": false}]}"
      }
    },
    l_folder_security {
      type = "lookup",
      behavior = "simple",
      dataSource =  ${mediasite_ds},
      dataSource {
        query {
          read {
            verb = "post",
            uri = "assignownerhdr",
            body = "assignpermissions"
          }
        }
      }
    }
    load_folder_uuid {
      type = "join",
      behavior = "",
      iterateR = "ds => ds.value",
      keyL = ${parent_dir_uuid}1"$moduleid",
      keyR = "$ParentFolderId$Name",
      changeL = "$moduleid",
      changeR = "$Id",
      dataSource =  ${mediasite_ds},
      dataSource{
        query{
          read {
            uri =  ${mediasite_ds.url}"/Folders?$skip=0&$top="${limit_folders_read}
          }
        }
      }
    }
  },
 pipelines {
      create-schedules {
        pipe = "read-schedules | load_module_uuid | load_folder_uuid | t_assign_schedule | create_schedule | t_assign_recurrence | create_recurrence | dumpthis | t_module_association | create_module_association"
      },
      create_catalogs {
        pipe = "read_modules | t_catalog | setup_catalog | dumpthis | t_catalog_put | set_catalog_search | module_uuid  | dumpthis | t_catalog_module | assign_catalog_module"
      },
     set_schedule_owner {
       pipe = " r_folders | j_schedule | t_schedule_owner | l_schedule_owner "
     },
     set_catalog_owner {
       pipe = " r_folders | j_catalog | t_catalog_owner | l_catalog_owner "
     },
    delete_all_schedules
      {
        pipe = "get_schedules | tr1 | dumpthis | merge_del_schedule | delete_schedules "
      },
    delete_catalogs
      {
        pipe = " get_catalogs | tr1 | dumpthis | t_del_catalog | process_delete_catalogs "
      },
    propagate_security
      {
        pipe =  " get_folders | tr1 | dumpthis | t_folder_security | l_folder_security "
      }
  },
  startup {
    exec = "delete_all_schedules"
  }

}

