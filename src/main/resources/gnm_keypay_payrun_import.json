{
  "script": {
    "schema": {},
    "tasks": {
      "load-payruns": {
        "type": "extract",
        "behavior": "simple",
        "dataSource": {
          "type": "rest",
          "behavior": "simple",
          "path": "-",
          "credential": {
            "user": "WmFXcGs0dVJsU3VUS0dCcXJsVmIxdz09",
            "password": ""
          },
          "query": {
            "read": {
              "uri": "https://gandm.yourpayroll.com.au/api/v2/business/24195/payrun"
            }
          }
        }
      },
	  "load-locations": {
        "type": "extract",
        "behavior": "simple",
        "dataSource": {
          "type": "rest",
          "behavior": "simple",
          "path": "-",
          "credential": {
            "user": "WmFXcGs0dVJsU3VUS0dCcXJsVmIxdz09",
            "password": ""
          },
          "query": {
            "read": {
              "uri": "https://gandm.yourpayroll.com.au/api/v2/business/24195/location"
            }
          }
        }
      },
      "load-deductioncategories": {
        "type": "extract",
        "behavior": "simple",
        "dataSource": {
          "type": "rest",
          "behavior": "simple",
          "path": "-",
          "credential": {
            "user": "WmFXcGs0dVJsU3VUS0dCcXJsVmIxdz09",
            "password": ""
          },
          "query": {
            "read": {
              "uri": "https://gandm.yourpayroll.com.au/api/v2/business/24195/deductioncategory"
            }
          }
        }
      },
      "load-employeeexpensecategories": {
        "type": "extract",
        "behavior": "simple",
        "dataSource": {
          "type": "rest",
          "behavior": "simple",
          "path": "-",
          "credential": {
            "user": "WmFXcGs0dVJsU3VUS0dCcXJsVmIxdz09",
            "password": ""
          },
          "query": {
            "read": {
              "uri": "https://gandm.yourpayroll.com.au/api/v2/business/24195/employeeexpensecategory"
            }
          }
        }
      },
      "load-employerliabilitycategories": {
        "type": "extract",
        "behavior": "simple",
        "dataSource": {
          "type": "rest",
          "behavior": "simple",
          "path": "-",
          "credential": {
            "user": "WmFXcGs0dVJsU3VUS0dCcXJsVmIxdz09",
            "password": ""
          },
          "query": {
            "read": {
              "uri": "https://gandm.yourpayroll.com.au/api/v2/business/24195/employerliabilitycategory"
            }
          }
        }
      },
	  "load-paycategories": {
        "type": "extract",
        "behavior": "simple",
        "dataSource": {
          "type": "rest",
          "behavior": "simple",
          "path": "-",
          "credential": {
            "user": "WmFXcGs0dVJsU3VUS0dCcXJsVmIxdz09",
            "password": ""
          },
          "query": {
            "read": {
              "uri": "https://gandm.yourpayroll.com.au/api/v2/business/24195/paycategory"
            }
          }
        }
      },
	  "load-employees": {
        "type": "extract",
        "behavior": "simple",
        "dataSource": {
          "type": "rest",
          "behavior": "simple",
          "path": "-",
          "credential": {
            "user": "WmFXcGs0dVJsU3VUS0dCcXJsVmIxdz09",
            "password": ""
          },
          "query": {
            "read": {
              "uri": "https://gandm.yourpayroll.com.au/api/v2/business/24195/employee/unstructured"
            }
          }
        }
      },
	  "load-employmenttypes": {
        "type": "extract",
        "behavior": "simple",
        "dataSource": {
          "type": "rest",
          "behavior": "simple",
          "path": "-",
          "credential": {
            "user": "WmFXcGs0dVJsU3VUS0dCcXJsVmIxdz09",
            "password": ""
          },
          "query": {
            "read": {
              "uri": "https://gandm.yourpayroll.com.au/api/v2/business/24195/employee/unstructured?$select=EmploymentType"
            }
          }
        }
      },
	  "load-mock-payruns": {
	    "type": "extract",
		"behavior": "simple",
		"attribute": "payruns",
		"dataSource": {
          "behavior" : "readJsonFromFile",
          "directory": "c://temp//",
          "type": "file",
          "filenameTemplate": "payruns.json",
          "outputDelimiter": ","
        }
	  },
	  "get-last-payrun": {
	    "type": "transform",
        "batch": [
          "orderBy, dateFinalised, date, yyyy-MM-dd'T'HH:mm:ss, asc"
        ]
	  },
	  "load-payrunearninglines-merge": {
        "type": "merge",
        "behavior": "simple",
        "attribute": "earninglines",
        "dataSource": {
          "type": "rest",
          "behavior": "simple",
          "path": "-",
          "credential": {
            "user": "WmFXcGs0dVJsU3VUS0dCcXJsVmIxdz09",
            "password": ""
          },
          "query": {
            "read": {
              "uri": "https://gandm.yourpayroll.com.au/api/v2/business/24195/payrun/~{d.id}/earningslines/"
            }
          }
        }
      },
      "load-payrundeductions-merge": {
        "type": "merge",
        "behavior": "simple",
        "attribute": "deductions",
        "dataSource": {
          "type": "rest",
          "behavior": "simple",
          "path": "-",
          "credential": {
            "user": "WmFXcGs0dVJsU3VUS0dCcXJsVmIxdz09",
            "password": ""
          },
          "query": {
            "read": {
              "uri": "https://gandm.yourpayroll.com.au/api/v2/business/24195/payrun/~{d.id}/deductions/"
            }
          }
        }
      },
      "load-payrunemployeeexpenses-merge": {
        "type": "merge",
        "behavior": "simple",
        "attribute": "employeeexpenses",
        "dataSource": {
          "type": "rest",
          "behavior": "simple",
          "path": "-",
          "credential": {
            "user": "WmFXcGs0dVJsU3VUS0dCcXJsVmIxdz09",
            "password": ""
          },
          "query": {
            "read": {
              "uri": "https://gandm.yourpayroll.com.au/api/v2/business/24195/payrun/~{d.id}/employeeexpenses"
            }
          }
        }
      },
	  "load-payrunsuperadjustments-merge": {
        "type": "merge",
        "behavior": "simple",
        "attribute": "superadjustments",
        "dataSource": {
          "type": "rest",
          "behavior": "simple",
          "path": "-",
          "credential": {
            "user": "WmFXcGs0dVJsU3VUS0dCcXJsVmIxdz09",
            "password": ""
          },
          "query": {
            "read": {
              "uri": "https://gandm.yourpayroll.com.au/api/v2/business/24195/payrun/~{d.id}/superadjustments/"
            }
          }
        }
      },
      "load-payrunpaygadjustments-merge": {
        "type": "merge",
        "behavior": "simple",
        "attribute": "paygadjustments",
        "dataSource": {
          "type": "rest",
          "behavior": "simple",
          "path": "-",
          "credential": {
            "user": "WmFXcGs0dVJsU3VUS0dCcXJsVmIxdz09",
            "password": ""
          },
          "query": {
            "read": {
              "uri": "https://gandm.yourpayroll.com.au/api/v2/business/24195/payrun/~{d.id}/paygadjustments/"
            }
          }
        }
      },
      "flatten-payrun-earninglines-payrun": {
	    "type": "transform",
        "batch": [
          "flattenStructure, earninglines._.root.earningsLines._.*, +earninglines._.root.payRunId",
		  "mapToDataSetTableScala"
        ]
	  },
      "flatten-payrun-deductions-payrun": {
	    "type": "transform",
        "batch": [
          "flattenStructure, deductions._.root.deductions._.*, +deductions._.root.payRunId",
		  "mapToDataSetTableScala"
        ]
	  },
      "flatten-payrun-employeeexpenses-payrun": {
	    "type": "transform",
        "batch": [
          "flattenStructure, employeeexpenses._.root.employeeExpenses._.*, +employeeexpenses._.root.payRunId",
		  "mapToDataSetTableScala"
        ]
	  },
      "flatten-payrun-superadjustments-payrun": {
	    "type": "transform",
        "batch": [
          "flattenStructure, superadjustments._.root.superAdjustments._.*, +superadjustments._.root.payRunId",
		  "mapToDataSetTableScala"
        ]
	  },
      "flatten-payrun-paygadjustments-payrun": {
	    "type": "transform",
        "batch": [
          "flattenStructure, paygadjustments._.root.paygAdjustments._.*, +paygadjustments._.root.payRunId",
		  "mapToDataSetTableScala"
        ]
	  },
	  "load-employees-merge": {
        "type": "merge",
        "behavior": "simple",
        "attribute": "employees",
        "dataSource": {
          "type": "rest",
          "behavior": "simple",
          "path": "-",
          "credential": {
            "user": "WmFXcGs0dVJsU3VUS0dCcXJsVmIxdz09",
            "password": ""
          },
          "query": {
            "read": {
              "uri": "https://gandm.yourpayroll.com.au/api/v2/business/24195/employee/unstructured/~{d.employeeId}"
            }
          }
        }
      },
	  "load-paycategory-merge": {
        "type": "merge",
        "behavior": "simple",
        "attribute": "paycategory",
        "dataSource": {
          "type": "rest",
          "behavior": "simple",
          "path": "-",
          "credential": {
            "user": "WmFXcGs0dVJsU3VUS0dCcXJsVmIxdz09",
            "password": ""
          },
          "query": {
            "read": {
              "uri": "https://gandm.yourpayroll.com.au/api/v2/business/24195/paycategory/~{d.payCategoryId}"
            }
          }
        }
      },
	  "load-location-merge": {
        "type": "merge",
        "behavior": "simple",
        "attribute": "location",
        "dataSource": {
          "type": "rest",
          "behavior": "simple",
          "path": "-",
          "credential": {
            "user": "WmFXcGs0dVJsU3VUS0dCcXJsVmIxdz09",
            "password": ""
          },
          "query": {
            "read": {
              "uri": "https://gandm.yourpayroll.com.au/api/v2/business/24195/location/~{d.locationId}"
            }
          }
        }
      },
	  "update-payrun-db": {
        "type": "datasourceupdate",
        "behavior": "",
        "keys": [
          "externalref"
        ],
        "dataSource": {
          "type": "sql",
          "behavior": "",
          "jdbcDriver": "org.postgresql.Driver",
          "connect": "jdbc:postgresql://localhost/payrolldev?user=payroll&password=payroll",
          "query": {
            "queryTemplate": "",
            "create": "insert into dim_payrun (externalref, datefinalised, payscheduleid, payperiodstarting, payperiodending, datepaid, isfinalised) values (@externalref::int,@dateFinalised::date,@payScheduleId::int,@payPeriodStarting::date,@payPeriodEnding::date,@datePaid::date,@isFinalised::bool)",
            "read": "select * from dim_payrun",
            "update": "update dim_payrun set datefinalised=@dateFinalised::date, payscheduleid=@payScheduleId::int, payperiodstarting=@payPeriodStarting::date,            payperiodending=@payPeriodEnding::date, datepaid=@datePaid::date, isfinalised=@isFinalised::bool where externalref = @externalref::int"
          }
        }
      },
	  "update-location-db": {
        "type": "datasourceupdate",
        "behavior": "",
        "keys": [
          "externalref"
        ],
        "dataSource": {
          "type": "sql",
          "behavior": "",
          "jdbcDriver": "org.postgresql.Driver",
          "connect": "jdbc:postgresql://localhost/payrolldev?user=payroll&password=payroll",
          "query": {
            "queryTemplate": "",
            "create": "insert into dim_location (externalref, externalparentref, label, fullyqualifiedlabel) values (@externalref::int, NullIF(@externalparentref,'')::int, @label, @fullyqualifiedlabel)",
            "read": "select * from dim_location",
            "update": "update dim_location set parent_sk=@parent_sk::bigint, externalparentref=@externalparentref::int, label=@label, fullyqualifiedlabel=@fullyqualifiedlabel where externalref = @externalref::int"
          }
        }
      },
      "update-deductioncategory-db": {
        "type": "datasourceupdate",
        "behavior": "",
        "keys": [
          "externalref"
        ],
        "dataSource": {
          "type": "sql",
          "behavior": "",
          "jdbcDriver": "org.postgresql.Driver",
          "connect": "jdbc:postgresql://localhost/payrolldev?user=payroll&password=payroll",
          "query": {
            "queryTemplate": "",
            "create": "insert into dim_deductioncategory (externalref, label, taxexempt, source, externalid, sgccalculationimpact, paymentsummaryclassification, expensesgeneralledgermappingcode, liabilitygeneralledgermappingcode) values (@externalref::int, @label, @taxexempt::bool, @source, NullIF(@externalid,'')::int, @sgccalculationimpact, @paymentsummaryclassification, NullIF(@expensegeneralledgermappingcode,''), NullIF(@liabilitygeneralledgermappingcode,''))",
            "read": "select * from dim_deductioncategory",
            "update": "update dim_deductioncategory set label=@label, taxexempt=@taxexempt:bool, source=@source, externalid=@externalid, sgccalculationimpact=@sgccalculationimpact, paymentsummaryclassification=@paymentsummaryclassification, expensesgeneralledgermappingcode=@expensegeneralledgermappingcode, liabilitygeneralledgermappingcode=@liabilitygeneralledgermappingcode where externalref = @externalref::int"
          }
        }
      },
      "update-employeeexpensecategory-db": {
        "type": "datasourceupdate",
        "behavior": "",
        "keys": [
          "externalref"
        ],
        "dataSource": {
          "type": "sql",
          "behavior": "",
          "jdbcDriver": "org.postgresql.Driver",
          "connect": "jdbc:postgresql://localhost/payrolldev?user=payroll&password=payroll",
          "query": {
            "queryTemplate": "",
            "create": "insert into dim_employeeexpensecategory (externalref, label, externalreferenceid, canbedeleted, generalledgermappingcode) values (@externalref::int, @label,  NullIF(@externalreferenceid,'')::int, @canbedeleted::bool, NullIF(@generalledgermappingcode,''))",
            "read": "select * from dim_employeeexpensecategory",
            "update": "update dim_employeeexpensecategory set label=@label, externalreferenceid=@externalreferenceid, canbedeleted=@canbedeleted, generalledgermappingcode=@generalledgermappingcode where externalref = @externalref::int"
          }
        }
      },
      "update-employerliabilitycategory-db": {
        "type": "datasourceupdate",
        "behavior": "",
        "keys": [
          "externalref"
        ],
        "dataSource": {
          "type": "sql",
          "behavior": "",
          "jdbcDriver": "org.postgresql.Driver",
          "connect": "jdbc:postgresql://localhost/payrolldev?user=payroll&password=payroll",
          "query": {
            "queryTemplate": "",
            "create": "insert into dim_employerliabilitycategory (externalref, externalreferenceid, canbedeleted, hidefrompayslips, showtotalpayments, includeinshiftcosts) values (@externalref::int, NullIF(@externalreferenceid,'')::int, @canbedeleted::bool, @hidefrompayslips::bool, @showtotalpayments::bool, @includeinshiftcosts::bool)",
            "read": "select * from dim_employerliabilitycategory",
            "update": "update dim_employerliabilitycategory set label=@label, externalreferenceid=@externalreferenceid, canbedeleted=@canbedeleted, hidefrompayslips=@hidefrompayslips, showtotalpayments=@showtotalpayments, includeinshiftcosts=@includeinshiftcosts where externalref = @externalref::int"
          }
        }
      },
	  "update-paycategory-db": {
        "type": "datasourceupdate",
        "behavior": "",
        "keys": [
          "externalref"
        ],
        "dataSource": {
          "type": "sql",
          "behavior": "",
          "jdbcDriver": "org.postgresql.Driver",
          "connect": "jdbc:postgresql://localhost/payrolldev?user=payroll&password=payroll",
          "query": {
            "queryTemplate": "",
            "create": "insert into dim_paycategory (externalref, label, rateunit, accruesleave, defaultsuperrate, rateloadingpercent, penaltyloadingpercent, istaxexempt, ispayrolltaxexempt, externalid, source, externalparentref, generalledgermappingcode, paymentsummaryclassification) values (@externalref::int, @label, @rateUnit, @accruesLeave::bool, @defaultSuperRate::numeric, @rateLoadingPercent::numeric, @penaltyLoadingPercent::numeric, @isTaxExempt::bool, @isPayRollTaxExempt::bool, NullIf(@externalId,'')::int, @source, NullIF(@externalparentref,'')::int, NullIf(@generalLedgerMappingCode,''), @paymentSummaryClassification)",
            "read": "select * from dim_paycategory",
            "update": "update dim_paycategory set label=@label, rateunit=@rateUnit, accruesleave=@accruesLeave::bool, defaultsuperrate=@defaultSuperRate::numeric, rateloadingpercent=@rateLoadinPercent::numeric, penaltyloadingpercent=@penaltyLoadingPercent::numeric, istaxexempt=@isTaxExempt::bool, ispayrolltaxexempt=@isPayRollTaxExempt::bool, externalid=@externalId::int, source=@source, externalparentref=@externalparentref::int, generalledgermappingcode=@generalLedgerMappingCode::int, paymentsummaryclassification=@paymentSummaryClassification where externalref = @externalref::int"
          }
        }
      },
	  "update-employmenttype-db": {
        "type": "datasourceupdate",
        "behavior": "",
        "keys": [
          "label"
        ],
        "dataSource": {
          "type": "sql",
          "behavior": "",
          "jdbcDriver": "org.postgresql.Driver",
          "connect": "jdbc:postgresql://localhost/payrolldev?user=payroll&password=payroll",
          "query": {
            "queryTemplate": "",
            "create": "insert into dim_employmenttype (label) values(@label)",
            "read": "select * from dim_employmenttype",
            "update": ""
          }
        }
      },
	  "update-employee-db": {
        "type": "datasourceupdate",
        "behavior": "",
        "keys": [
          "externalref"
        ],
        "dataSource": {
          "type": "sql",
          "behavior": "",
          "jdbcDriver": "org.postgresql.Driver",
          "connect": "jdbc:postgresql://localhost/payrolldev?user=payroll&password=payroll",
          "query": {
            "queryTemplate": "",
            "create": "insert into dim_employee (externalref, firstname, middlename, surname, dob, employmenttype_sk, startdate, enddate, previoussurname, jobtitle, primarylocation_sk) values (@externalref::int, @firstName, @middleName, @surname, @dateOfBirth::date, @employmenttype_sk::bigint, NullIF(@startDate,'')::date, NullIF(@endDate,'')::date, @previousSurname, @jobTitle, NullIf(@primarylocation_sk,'')::bigint)",
            "read": "select * from dim_employee",
            "update": "update dim_employee set firstname=@firstName, middlename=@middleName, surname=@surname, dob=@dateOfBirth::date, employmenttype_sk=@employmenttype_sk::bigint, startdate=@startDate, enddate=@endDate, previoussurname=@previousSurname, jobtitle=@jobTitle, primarylocation_sk=@primarylocation_sk::bigint where externalref = @externalref::int"
          }
        }
      },
	  "update-payrunearninglines-db": {
        "type": "datasourceupdate",
        "behavior": "",
        "keys": [
          "payrun_sk","employee_sk","paycategory_sk","location_sk"
        ],
        "dataSource": {
          "type": "sql",
          "behavior": "",
          "jdbcDriver": "org.postgresql.Driver",
          "connect": "jdbc:postgresql://localhost/payrolldev?user=payroll&password=payroll",
          "query": {
            "queryTemplate": "",
            "create": "insert into fact_payrunearninglines(employee_sk, paycategory_sk, location_sk, payrun_sk, units, notes, rate, earnings, super, sfss, help, payg, lumpsumnumberofpayperiods, externalid) values (@employee_sk::bigint, @paycategory_sk::bigint, COALESCE(NullIF(@location_sk,''),'0')::bigint, @payrun_sk::bigint, @units::numeric, @notes, @rate::numeric, @earnings::numeric, @super::numeric, @sfss::numeric, @help::numeric, @payg::numeric, @lumpsumnumberofpayperiods::numeric, NullIf(@externalid,'')::int)",
            "read": "select * from fact_payrunearninglines",
            "update": "update fact_payrunearninglines set employee_sk=@employee_sk::bigint, paycategory_sk=@paycategory_sk::bigint, location_sk=@location_sk::bigint, payrun_sk=@payrun_sk::bigint, units=@units::numeric, notes=@notes, rate=@rate::numeric, earnings=@earnings::numeric, super=@super::numeric, sfss=@sfss::numeric, help=@help::numeric, payg=@payg::numeric, lumpsumnumberofpayperiods=@lumpsumnumberofpayperiods::numeric, externalid=@externalid::int where payrun_sk = @payrun_sk::bigint and employee_sk = @employee_sk::bigint and paycategory_sk = @paycategory_sk::bigint and location_sk = @location_sk::bigint"
          }
        }
      },
      "update-payrundeductions-db": {
        "type": "datasourceupdate",
        "behavior": "",
        "keys": [
          "payrun_sk","employee_sk","deductioncategory_sk","location_sk"
        ],
        "dataSource": {
          "type": "sql",
          "behavior": "",
          "jdbcDriver": "org.postgresql.Driver",
          "connect": "jdbc:postgresql://localhost/payrolldev?user=payroll&password=payroll",
          "query": {
            "queryTemplate": "",
            "create": "insert into fact_payrundeductions(employee_sk,  location_sk, payrun_sk, deductioncategory_sk, notes, amount, paytosuperfundname, payto, externalid) values (@employee_sk::bigint,  COALESCE(NullIF(@location_sk,''),'0')::bigint, @payrun_sk::bigint,@deductioncategory_sk::bigint, @notes, @amount::numeric, @paytosuperfundname, @payto, NullIf(@externalid,'')::int)",
            "read": "select * from fact_payrundeductions",
            "update": "update fact_payrundeductions set employee_sk=@employee_sk::bigint, location_sk=@location_sk::bigint, payrun_sk=@payrun_sk::bigint, deductioncategory_sk=@deductioncategory_sk::bigint, notes=@notes, amount=@amount::numeric, paytosuperfundname=@paytosuperfundname, payto=@payto, externalid=@externalid::int where payrun_sk = @payrun_sk::bigint and employee_sk = @employee_sk::bigint and deductioncategory_sk = @deductioncategory_sk::bigint and location_sk = @location_sk::bigint"
          }
        }
      },
      "update-payrunemployeeexpenses-db": {
        "type": "datasourceupdate",
        "behavior": "",
        "keys": [
          "payrun_sk","employee_sk","employeeexpensecategory_sk","location_sk"
        ],
        "dataSource": {
          "type": "sql",
          "behavior": "",
          "jdbcDriver": "org.postgresql.Driver",
          "connect": "jdbc:postgresql://localhost/payrolldev?user=payroll&password=payroll",
          "query": {
            "queryTemplate": "",
            "create": "insert into fact_payrunemployeeexpenses (employee_sk, employeeexpensecategory_sk, location_sk, payrun_sk, notes, amount, externalid) values (@employee_sk::bigint, @employeeexpensecategory_sk::bigint, COALESCE(NullIF(@location_sk,''),'0')::bigint, @payrun_sk::bigint, @notes, @amount::numeric, NullIf(@externalid,'')::int)",
            "read": "select * from fact_payrunemployeeexpenses",
            "update": "update fact_payrunemployeeexpenses set employee_sk=@employee_sk::bigint, employeeexpensecategory_sk=@employeeexpensecategory_sk::bigint, location_sk=@location_sk::bigint, payrun_sk=@payrun_sk::bigint,  notes=@notes, amount=@amount::numeric, externalid=@externalid::int where payrun_sk = @payrun_sk::bigint and employee_sk = @employee_sk::bigint and employeeexpensecategory_sk = @employeeexpensecategory_sk::bigint and location_sk = @location_sk::bigint"
          }
        }
      },
	  "update-payrunsuperadjustments-db": {
        "type": "datasourceupdate",
        "behavior": "",
        "keys": [
          "payrun_sk","employee_sk","location_sk"
        ],
        "dataSource": {
          "type": "sql",
          "behavior": "",
          "jdbcDriver": "org.postgresql.Driver",
          "connect": "jdbc:postgresql://localhost/payrolldev?user=payroll&password=payroll",
          "query": {
            "queryTemplate": "",
            "create": "insert into fact_payrunsuperadjustments(employee_sk,  payrun_sk, location_sk, contributiontype, notes, amount, externalid) values (@employee_sk::bigint, @payrun_sk::bigint, COALESCE(NullIF(@location_sk,''),'0')::bigint, @contributiontype, @notes, @amount::numeric, NullIf(@externalid,'')::int)",
            "read": "select * from fact_payrunsuperadjustments",
            "update": "update fact_payrunsuperadjustments set employee_sk=@employee_sk::bigint, payrun_sk=@payrun_sk::bigint, location_sk=@location_sk::bigint, contributiontype=@contributiontype, notes=@notes, amount=@amount::numeric, externalid=@externalid::int where payrun_sk = @payrun_sk::bigint and employee_sk = @employee_sk::bigint and location_sk = @location_sk::bigint"
          }
        }
      },
      "update-payrunpaygadjustments-db": {
        "type": "datasourceupdate",
        "behavior": "",
        "keys": [
          "payrun_sk","employee_sk","location_sk"
        ],
        "dataSource": {
          "type": "sql",
          "behavior": "",
          "jdbcDriver": "org.postgresql.Driver",
          "connect": "jdbc:postgresql://localhost/payrolldev?user=payroll&password=payroll",
          "query": {
            "queryTemplate": "",
            "create": "insert into fact_payrunpaygadjustmentss(employee_sk,  payrun_sk, location_sk, notes, amount, externalid) values (@employee_sk::bigint, @payrun_sk::bigint, COALESCE(NullIF(@location_sk,''),'0')::bigint, @notes, @amount::numeric, NullIf(@externalid,'')::int)",
            "read": "select * from fact_payrunpaygadjustmentss",
            "update": "update fact_payrunpaygadjustmentss set employee_sk=@employee_sk::bigint, payrun_sk=@payrun_sk::bigint, location_sk=@location_sk::bigint, notes=@notes, amount=@amount::numeric, externalid=@externalid::int where payrun_sk = @payrun_sk::bigint and employee_sk = @employee_sk::bigint and location_sk = @location_sk::bigint"
          }
        }
      },
      "transform-to-table": {
	    "type": "transform",
        "batch": [
          "mapToDataSetTableScala",
		  "rename,id,externalref,parentId,externalparentref,name,label,fullyQualifiedName,fullyqualifiedlabel,description,label"
        ]
	  },
	  "transform-to-table-and-make-distinct": {
	    "type": "transform",
        "batch": [
          "mapToDataSetTableScala",
		  "rename,employmentType,label",
		  "deDup,label"
        ]
	  },
	  "read-parent-dim": {
        "type": "extract",
        "behavior": "simple",
        "dataSource": {
          "type": "sql",
          "jdbcDriver": "org.postgresql.Driver",
          "connect": "jdbc:postgresql://localhost/payrolldev?user=payroll&password=payroll",
          "query": {
            "queryTemplate": "select sk,externalref,externalparentref,label,fullyqualifiedlabel from dim_location where externalparentref is not null"
          }
        }
      },
	  "lookup-parent-location": {
        "type": "lookup",
        "behavior": "lookup-merge",
        "lookup1": "externalparentref",
        "lookup2": "externalref",
        "dataSource": {
          "type": "sql",
          "jdbcDriver": "org.postgresql.Driver",
          "connect": "jdbc:postgresql://localhost/payrolldev?user=payroll&password=payroll",
          "query": {
            "queryTemplate": "select sk as parent_sk, externalref from dim_location where externalref in ($1)"
          }
        }
      },
	  "lookup-primary-location": {
        "type": "lookup",
        "behavior": "lookup-merge",
        "lookup1": "primaryLocation",
        "lookup2": "fullyqualifiedlabel",
        "dataSource": {
          "type": "sql",
          "jdbcDriver": "org.postgresql.Driver",
          "connect": "jdbc:postgresql://localhost/payrolldev?user=payroll&password=payroll",
          "query": {
            "queryTemplate": "select sk as primarylocation_sk, fullyqualifiedlabel from dim_location where fullyqualifiedlabel in ($1)"
          }
        }
      },
	  "lookup-employeetype": {
        "type": "lookup",
        "behavior": "lookup-merge",
        "lookup1": "employmentType",
        "lookup2": "label",
        "dataSource": {
          "type": "sql",
          "jdbcDriver": "org.postgresql.Driver",
          "connect": "jdbc:postgresql://localhost/payrolldev?user=payroll&password=payroll",
          "query": {
            "queryTemplate": "select sk as employmenttype_sk, label from dim_employmenttype where label in ($1)"
          }
        }
      },
	  "lookup-employee-dim": {
        "type": "lookup",
        "behavior": "lookup-merge",
        "lookup1": "employeeId",
        "lookup2": "externalref",
        "dataSource": {
          "type": "sql",
          "jdbcDriver": "org.postgresql.Driver",
          "connect": "jdbc:postgresql://localhost/payrolldev?user=payroll&password=payroll",
          "query": {
            "queryTemplate": "select sk as employee_sk, externalref from dim_employee where externalref in ($1)"
          }
        }
      },
	  "lookup-payrun-dim": {
        "type": "lookup",
        "behavior": "lookup-merge",
        "lookup1": "payRunId",
        "lookup2": "externalref",
        "dataSource": {
          "type": "sql",
          "jdbcDriver": "org.postgresql.Driver",
          "connect": "jdbc:postgresql://localhost/payrolldev?user=payroll&password=payroll",
          "query": {
            "queryTemplate": "select sk as payrun_sk, externalref from dim_payrun where externalref in ($1)"
          }
        }
      },
	  "lookup-paycategory-dim": {
        "type": "lookup",
        "behavior": "lookup-merge",
        "lookup1": "payCategoryId",
        "lookup2": "externalref",
        "dataSource": {
          "type": "sql",
          "jdbcDriver": "org.postgresql.Driver",
          "connect": "jdbc:postgresql://localhost/payrolldev?user=payroll&password=payroll",
          "query": {
            "queryTemplate": "select sk as paycategory_sk, externalref from dim_paycategory where externalref in ($1)"
          }
        }
      },
      "lookup-deductioncategory-dim": {
        "type": "lookup",
        "behavior": "lookup-merge",
        "lookup1": "deductionCategoryId",
        "lookup2": "externalref",
        "dataSource": {
          "type": "sql",
          "jdbcDriver": "org.postgresql.Driver",
          "connect": "jdbc:postgresql://localhost/payrolldev?user=payroll&password=payroll",
          "query": {
            "queryTemplate": "select sk as deductioncategory_sk, externalref from dim_deductioncategory where externalref in ($1)"
          }
        }
      },
      "lookup-employeeexpensecategory-dim": {
        "type": "lookup",
        "behavior": "lookup-merge",
        "lookup1": "employeeExpenseCategoryId",
        "lookup2": "externalref",
        "dataSource": {
          "type": "sql",
          "jdbcDriver": "org.postgresql.Driver",
          "connect": "jdbc:postgresql://localhost/payrolldev?user=payroll&password=payroll",
          "query": {
            "queryTemplate": "select sk as employeeexpensecategory_sk, externalref from dim_employeeexpensecategory where externalref in ($1)"
          }
        }
      },
      "lookup-employerliabilitycategory-dim": {
        "type": "lookup",
        "behavior": "lookup-merge",
        "lookup1": "employerLiabilityCategoryId",
        "lookup2": "externalref",
        "dataSource": {
          "type": "sql",
          "jdbcDriver": "org.postgresql.Driver",
          "connect": "jdbc:postgresql://localhost/payrolldev?user=payroll&password=payroll",
          "query": {
            "queryTemplate": "select sk as employerliabilitycategory_sk, externalref from dim_employerliabilitycategory where externalref in ($1)"
          }
        }
      },
	  "lookup-location-dim": {
        "type": "lookup",
        "behavior": "lookup-merge",
        "lookup1": "locationId",
        "lookup2": "externalref",
        "dataSource": {
          "type": "sql",
          "jdbcDriver": "org.postgresql.Driver",
          "connect": "jdbc:postgresql://localhost/payrolldev?user=payroll&password=payroll",
          "query": {
            "queryTemplate": "select sk as location_sk, externalref from dim_location where externalref in ($1)"
          }
        }
      },
	  "prep-parent-location": {
	     "type": "transform",
        "batch": [
          "rename,parent_sk1,parent_sk"
        ]
	  },
	  "prep-employee-dim": {
	    "type": "transform",
        "batch": [
          "rename, employmenttype_sk1, employmenttype_sk, primarylocation_sk1, primarylocation_sk"
        ]
	  },
	  "prep-payrunearninglines-fact": {
	    "type": "transform",
        "batch": [
		  "defaultIfBlank,location_sk1,0",
          "rename, payrun_sk1, payrun_sk, paycategory_sk1, paycategory_sk, employee_sk1, employee_sk, location_sk2, location_sk"
        ]
	  },
      "prep-payrundeductions-fact": {
	    "type": "transform",
        "batch": [
		  "defaultIfBlank,location_sk1,0",
          "rename, payrun_sk1, payrun_sk, deductioncategory_sk1, deductioncategory_sk, employee_sk1, employee_sk, location_sk2, location_sk"
        ]
	  },
      "prep-payrunemployeeexpenses-fact": {
	    "type": "transform",
        "batch": [
		  "defaultIfBlank,location_sk1,0",
          "rename, payrun_sk1, payrun_sk, employeeexpensecategory_sk1, employeeexpensecategory_sk, employee_sk1, employee_sk, location_sk2, location_sk"
        ]
	  },
      "prep-payrunadjustments-fact": {
	    "type": "transform",
        "batch": [
		  "defaultIfBlank,location_sk1,0",
          "rename, payrun_sk1, payrun_sk, employee_sk1, employee_sk, location_sk2, location_sk"
        ]
	  },
	  "flatten-mock-payrun-earninglines-payrun": {
	    "type": "transform",
        "batch": [
          "flattenStructure, earningsLines._.*, +payRunId",
		  "mapToDataSetTableScala"
        ]
	  },
	  "load-mock-payrunearninglines": {
	    "type": "extract",
		"behavior": "simple",
		"attribute": "earninglines",
		"dataSource": {
          "behavior" : "readJsonFromFile",
          "directory": "c://temp//",
          "type": "file",
          "filenameTemplate": "payrunearninglines.json",
          "outputDelimiter": ","
        }
	  }
    },
    "pipelines": {
	  "load-payrun-dim" : {
	    "pipe": "load-payruns | transform-to-table | update-payrun-db"
	  },
	  "load-location-dim" : {
	    "pipe": "load-locations | transform-to-table | update-location-db"
	  },
	  "load-paycategory-dim" : {
		"pipe": "load-paycategories | transform-to-table | update-paycategory-db"
	  },
      "load-deductioncategory-dim" : {
		"pipe": "load-deductioncategories | transform-to-table | update-deductioncategory-db"
	  },
      "load-employeeexpensecategory-dim" : {
		"pipe": "load-employeeexpensecategories | transform-to-table | update-employeeexpensecategory-db"
	  },
      "load-employerliabilitycategory-dim" : {
		"pipe": "load-employerliabilitycategories | transform-to-table | update-employerliabilitycategory-db"
	  },
	  "link-parent-locations" : {
		"pipe": "read-parent-dim | lookup-parent-location | prep-parent-location | update-location-db"
	  },
	  "load-employmenttype-dim" : {
		"pipe": "load-employmenttypes | transform-to-table-and-make-distinct | update-employmenttype-db"
	  },
	  "load-employee-dim" : {
		"pipe": "load-employees | transform-to-table | lookup-employeetype | lookup-primary-location | prep-employee-dim | update-employee-db"
	  },
	  "load-payrun-earning-lines" : {
        "pipe": "load-payruns | get-last-payrun | load-payrunearninglines-merge"
      },
	  "process-payrun-earning-lines" : {
	    "pipe": "load-payruns | get-last-payrun | load-payrunearninglines-merge | flatten-payrun-earninglines-payrun | transform-to-table | lookup-payrun-dim | lookup-employee-dim | lookup-paycategory-dim | lookup-location-dim | prep-payrunearninglines-fact | update-payrunearninglines-db"
	  },
      "process-payrun-deductions" : {
	    "pipe": "load-payruns | get-last-payrun | load-payrundeductions-merge | flatten-payrun-deductions-payrun | transform-to-table | lookup-payrun-dim | lookup-employee-dim | lookup-deductioncategory-dim | lookup-location-dim | prep-payrundeductions-fact | update-payrundeductions-db"
	  },
      "process-payrun-employee-expenses" : {
	    "pipe": "load-payruns | get-last-payrun | load-payrunemployeeexpenses-merge | flatten-payrun-employeeexpenses-payrun | transform-to-table | lookup-payrun-dim | lookup-employee-dim | lookup-employeeexpensecategory-dim | lookup-location-dim | prep-payrunemployeeexpenses-fact | update-payrunemployeeexpenses-db"
	  },
      "process-payrun-super-adjustments" : {
	    "pipe": "load-payruns | get-last-payrun | load-payrunsuperadjustments-merge | flatten-payrun-superadjustments-payrun | transform-to-table | lookup-payrun-dim | lookup-employee-dim | lookup-location-dim | prep-payrunadjustments-fact | update-payrunsuperadjustments-db"
	  },
      "process-payrun-payg-adjustments" : {
	    "pipe": "load-payruns | get-last-payrun | load-payrunpaygadjustments-merge | flatten-payrun-paygadjustments-payrun | transform-to-table | lookup-payrun-dim | lookup-employee-dim | lookup-location-dim | prep-payrunadjustments-fact | update-payrunpaygadjustments-db"
	  },
	  "mock-process-earning-lines" : {
	    "pipe": "load-mock-payrunearninglines | flatten-mock-payrun-earninglines-payrun | transform-to-table "
	  },
	  "load-dimensions" : {
	    "pipe": "load-payrun-dim | load-location-dim | link-parent-locations | load-paycategory-dim | load-deductioncategory-dim | load-employmenttype-dim | load-employee-dim | load-employeeexpensecategory-dim | load-employerliabilitycategory-dim" 
	  }
    },
    "services": { },
    "startup": {
      "exec": "process-payrun-super-adjustments"
    }
  }
}
