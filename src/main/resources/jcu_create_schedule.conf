include "jcu_localenv.conf"

script {
  schema {},
  tasks {
    read-schedules {
      type = "extract",
      behavior = "",
      dataSource = ${jcu_ds},
      dataSource {
        query {
          queryTemplate = "",
          read = "SELECT "${jcu_ds.sql_limit_return_result}" courseid+'_'+room+'_'+presenterfullname courseid,moduleid,room,"${jcu_ds.sql_room_recorder_map}" recorderid,year, DATEADD(mi, DATEDIFF(mi, GETUTCDATE(), GETDATE()),startdatetime) startdatetime,DATEADD(mi, DATEDIFF(mi, GETUTCDATE(), GETDATE()),enddatetime) enddatetime,duration*60*1000 duration,presenterusername,REPLACE(REPLACE(presenterfullname, CHAR(10), ''), CHAR(13), '') presenterfullname FROM "${jcu_ds.sql_default_jcu_table}" where presenterUsername is not null "${jcu_ds.sql_extra_where_clause}" order by moduleid"
        }
      }
    },
    read_modules {
      type = "extract",
      behavior = "",
      dataSource = ${jcu_ds},
      dataSource {
        query {
          queryTemplate = "",
          read = "select distinct "${jcu_ds.sql_limit_return_result}" moduleid from "${jcu_ds.sql_default_jcu_table}" where PresenterUsername is not null "${jcu_ds.sql_extra_where_clause}" order by moduleid"
        }
      }
    },
    load_folder_uuid {
      type = "join",
      behavior = "",
      iterateR = "ds => ds.value",
      keyL = ${parent_dir_uuid}"$moduleid",
      keyR = "$ParentFolderId$Name",
      changeL = "$moduleid",
      changeR = "$Id",
      dataSource = ${mediasite_ds},
      dataSource {
        query {
          read {
            uri = ${mediasite_ds.url}"/Folders?$skip=0&$top="${limit_folders_read}
          }
        }
      }
    },
    load_module_uuid {
      type = "join",
      behavior = "",
      iterateR = "ds => ds.value",
      keyL = "$moduleid",
      keyR = "$ModuleId",
      changeL = "$moduleid",
      changeR = "$Id",
      dataSource = ${mediasite_ds},
      dataSource {
        query {
          read {
            uri = ${mediasite_ds.url}"/Modules"
          }
        }
      }
    },
    module_uuid {
      type = "join",
      behavior = "",
      iterateR = "ds => ds.value",
      keyL = "${record.row.moduleid}",
      keyR = "$ModuleId",
      changeL = "${record.row.moduleid}",
      changeR = "$Id",
      dataSource = ${mediasite_ds},
      dataSource {
        query {
          read {
            uri = ${mediasite_ds.url}"/Modules",
          }
        }
      }
    },
    t_owner_schedule {
      type = "mergeTemplate",
      templates {
        assignownerhdr = ${mediasite_ds.url}"/ResourcePermissions('${create_schedule(0).Id}')",
        assignownerbody = "{\"Owner\" : ${row.presenterusername}, \"InheritPermissions\" : true}"
      }
    },
    assign_owner_schedule {
      type = "lookup",
      behavior = "simple",
      dataSource = ${mediasite_ds},
      dataSource {
        query {
          read {
            verb = "put",
            uri = "assignownerhdr",
            body = "assignownerbody"
          }
        }
      }
    },
    t_assign_schedule {
      type = "mergeTemplate",
      templates {
        assignschedulebody = "{\"RecorderId\":\"${recorderid}\",\"Name\": \"${courseid}\",\"FolderId\": \"${load_folder_uuid.item.Id}\",\"DeleteInactive\":true,\"LoadPresentation\":true,\"AutoStart\":true,\"AutoStop\":true,\"TitleType\":\"ScheduleNameAndAirDateTime\",\"ScheduleTemplateId\" : \""${schedule_template_uuid}"\", \"AdvanceCreationTime\":43200 }"
      }
    },
    create_schedule {
      type = "lookup",
      behavior = "simple",
      dataSource = ${mediasite_ds},
      dataSource {
        query {
          read {
            verb = "post",
            uri = ${mediasite_ds.url}"/Schedules",
            body = "assignschedulebody"
          }
        }
      }
    },
    t_assign_recurrence {
      type = "mergeTemplate",
      templates {
        schedulehdr = ${mediasite_ds.url}"/Schedules('${create_schedule(0).Id}')/Recurrences",
        assignschedulebody = "{\"RecordDuration\" : ${row.duration},\"StartRecordDateTime\" : \"${row.startdatetime}\",\"EndRecordDateTime\" : \"${row.enddatetime}\"}"
      }
    },
    create_recurrence {
      type = "lookup",
      behavior = "simple",
      dataSource = ${mediasite_ds},
      dataSource {
        query {
          read {
            verb = "post",
            uri = "schedulehdr",
            body = "assignschedulebody"
          }
        }
      }
    },
    t_module_association {
      type = "mergeTemplate",
      templates {
        association_template_hdr = ${mediasite_ds.url}"/Modules('${record.row.load_module_uuid.item.Id}')/AddAssociation",
        association_body = "{\"MediasiteId\":\"${record.create_schedule(0).Id}\"}"
      }
    },
    create_module_association {
      type = "lookup",
      behavior = "simple",
      dataSource = ${mediasite_ds},
      dataSource {
        query {
          read {
            verb = "post",
            uri = "association_template_hdr",
            body = "association_body"
          }
        }
      }
    },
    get_schedules {
      type = "extract",
      behavior = "",
      dataSource = ${mediasite_ds},
      dataSource {
        query {
          read {
            verb = "get",
            uri = ${mediasite_ds.url}"/Schedules?$skip=0&$top="${limit_schedules_read}
          }
        }
      }
    },
    merge_del_schedule {
      type = "mergeTemplate",
      templates {
        merge_del_hdr = ${mediasite_ds.url}"/Schedules('${Id}')"
      }
    },
    delete_schedules {
      type = "lookup",
      behavior = "simple",
      dataSource = ${mediasite_ds},
      dataSource {
        query {
          read {
            verb = "delete",
            uri = "merge_del_hdr",
            body = ""
          }
        }
      }
    },
    t_folder_security {
      type = "mergeTemplate",
      templates {
        assignownerhdr = "https://mediasiteDEV.jcu.edu.au/mediasite/api/v1/Folders('${Id}')/UpdatePermissions",
        assignpermissions = "{\"Owner\": \"${Owner}\",\"InheritFromParent\": false,\"MergePermissions\": true,\"PropagatePermissions\": true,\"PropagateOwner\": true,\"Permissions\": [{\"RoleId\": \""${permissions_role_uuid}"\",\"Read\": true,\"Write\": true,\"Execute\": true,\"Moderate\": true,\"Approve\": true,\"DenyRead\": false,\"DenyWrite\": false,\"DenyExecute\": false,\"DenyModerate\": false,\"DenyApprove\": false}]}"
      }
    },
    l_folder_security {
      type = "lookup",
      behavior = "simple",
      dataSource = ${mediasite_ds},
      dataSource {
        query {
          read {
            verb = "post",
            uri = "assignownerhdr",
            body = "assignpermissions"
          }
        }
      }
    }
    e_folders {
      type = "extract",
      behavior = "",
      dataSource = ${mediasite_ds},
      dataSource {
        query {
          read {
            uri = ${mediasite_ds.url}"/Folders?$skip=0&$top="${limit_folders_read}
          }
        }
      }
    }
    f_forparentfolder {
      type = "transformTerm"
      term = "ds => batch(ds.filter(d => d.ParentFolderId == \""${parent_dir_uuid}"\")) "
    }
    j_schedule {
      type = "join"
      iterateR = "ds => ds.value"
      keyL = "$Id"
      keyR = "$FolderId"
      changeL = "$Id"
      changeR = "$FolderId"
      dataSource = ${mediasite_ds}
      dataSource {
        query {
          read {
            uri = ${mediasite_ds.url}"/Schedules?$skip=0&$top="${limit_schedules_read}
          }
        }
      }
    }
    t_schedule_owner {
      type = "mergeTemplate"
      templates {
        hdr = ${mediasite_ds.url}"/ResourcePermissions('${j_schedule.item.Id}')",
        bdy = "{\"Owner\": \"${Owner}\",\"AccessControlList\": [{\"RoleId\": \""${permissions_role_uuid}"\",\"Read\": true,\"Write\": true,\"Execute\": true,\"Moderate\": true,\"Approve\": true,\"DenyRead\": false,\"DenyWrite\": false,\"DenyExecute\": false,\"DenyModerate\": false,\"DenyApprove\": false}]}"
      }
    }
    f_schedule_exclude_blank {
      type = "transformTerm"
      term = "ds => batch(ds.filterNot(d => d.j_schedule == \"\")) "
    }
    l_schedule_owner {
      type = "lookup"
      behavior = "simple"
      dataSource = ${mediasite_ds}
      dataSource {
        query {
          read {
            verb = "put"
            uri = "hdr"
            body = "bdy"
          }
        }
      }
    }
  }
  pipelines {
    create-schedules {
      pipe = "read-schedules | load_module_uuid | load_folder_uuid | t_assign_schedule | create_schedule | t_assign_recurrence | create_recurrence | t_module_association | create_module_association"
    }
    set_schedule_owner {
      pipe = " e_folders | tr1 | f_forparentfolder  | j_schedule  | dumpthis |  f_schedule_exclude_blank | t_schedule_owner  | l_schedule_owner  "
    }
    delete_all_schedules {
      pipe = "get_schedules | tr1 | dumpthis | merge_del_schedule | delete_schedules "
    }
    propagate_security {
      pipe = " e_folders | tr1 | dumpthis | f_forparentfolder | t_folder_security | l_folder_security "
    }
  }
  startup {
    exec = "set_schedule_owner"
  }

}

